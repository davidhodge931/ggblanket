% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standardise_width.R
\name{standardise_width}
\alias{standardise_width}
\title{Standardise width to the reference}
\usage{
standardise_width(
  ...,
  n = NULL,
  dodge_n = 1,
  aspect = "x",
  panel_widths = ggplot2::theme_get()$panel.widths,
  panel_heights = ggplot2::theme_get()$panel.heights
)
}
\arguments{
\item{...}{Require named arguments (and support trailing commas).}

\item{n}{Number of categories (excluding dodge groups) in the plot with width to be standardised.}

\item{dodge_n}{Number of dodge groups in the plot with width to be standardised.}

\item{aspect}{Aspect ("x" or "y") in the plot with width to be standardised.}

\item{panel_widths}{Panel widths in the plot with width to be standardised.}

\item{panel_heights}{Panel heights in the plot with width to be standardised.}
}
\description{
Standardise the width against the reference, so that widths look the same across plots.
}
\examples{
library(ggplot2)
library(dplyr)
library(stringr)
library(palmerpenguins)

set_blanket(
  theme = theme_lighter(
    panel_heights = rep(unit(50, "mm"), 100),
    panel_widths = rep(unit(75, "mm"), 100),
  )
)

penguins |>
  tidyr::drop_na(sex) |>
  mutate(across(sex, \(x) str_to_sentence(x))) |>
  gg_bar(
    x = sex,
    col = species,
    width = standardise_width(
      n = 2,
      dodge_n = 1,
      aspect = "x",
    )
  )

penguins |>
  tidyr::drop_na(sex) |>
  mutate(across(sex, \(x) str_to_sentence(x))) |>
  gg_bar(
    x = sex,
    col = species,
    position = position_dodge(),
    width = standardise_width(
      n = 2,
      dodge_n = 3,
      aspect = "x",
    )
  )

penguins |>
  tidyr::drop_na(sex) |>
  mutate(across(sex, \(x) str_to_sentence(x))) |>
  gg_bar(
    y = sex,
    col = species,
    position = position_dodge(),
    width = standardise_width(
      n = 2,
      dodge_n = 3,
      aspect = "y",
    )
  )

d <- tibble::tibble(
  continent = c("Europe","Europe","Europe",
                "Europe","Europe","South America","South America"),
  country = c("AT", "DE", "DK", "ES", "PK", "TW", "BR"),
  value = c(10L, 15L, 20L, 25L, 17L, 13L, 5L)
)

max_n <- d |>
  group_by(continent) |>
  count() |>
  ungroup() |>
  filter(n == max(n)) |>
  pull(n)

d |>
  mutate(country = forcats::fct_rev(country)) |>
  gg_col(y = country,
         x = value,
         facet = continent,
         width = standardise_width(
           n = max_n,
           dodge_n = 1,
           aspect = "y",
         ),
         facet_scales = "free_y",
  ) +
  scale_y_discrete(continuous.limits = c(1, max_n)) +
  coord_cartesian(reverse = "y", clip = "off")

}
